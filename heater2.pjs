/* @pjs preload="ComputerRoomLayout.jpg" */

//js
var w = $("body").innerWidth();
$(window).resize(function() {
	w = $("body").innerWidth();
	setup();
});

var temps = new Object;

var rt = function() { //randtemp
	return 0.1 * Math.floor(Math.random() * 90) + 18;
};

var coolrt = function() {
	return 0.1 * Math.floor(Math.random() * 20) + 17;
};

var gen_temps = function() {
	temps["3"] = {
		"4":  rt(),
		"6":  rt(), 
		"8":  rt(), 
		"10": rt(),
		"12": rt(),
		"14": rt(), 
		"16": rt(),
		"18": rt(),
		"20": rt(),
		"22": rt(),
		"24": rt(),
		"26": rt(),
		"28": rt(),
		"30": rt(),
		"32": rt(),
		"34": rt(),
		"36": rt(),
		"38": rt(),
		"40": rt(),
		"42": rt(),
		"44": rt(),
		"46": rt(),
		"48": rt(),
	};

	temps["6"] = {
		"2":  rt(),
	};

	temps["7"] = {
		"37": rt(),
	};

	temps["8"] = {
		"2":  rt(),
		"48": rt(),
		"50": rt(),
	};
	
	temps["10"] = {
		"2":  rt(),
		"4":  rt(),
		"6":  rt(), 
		"8":  rt(), 
		"10": rt(),
		"12": rt(),
		"14": coolrt(), 
		"16": coolrt(),
		"18": coolrt(),
		"20": coolrt(),
		"22": 26,
		"24": rt(),
		"26": rt(),
		"28": rt(),
		"30": rt(),
		"32": rt(),
		"34": rt(),
		"36": rt(),
		"38": rt(),
		"40": rt(),
		"42": rt(),
		"44": rt(),
		"46": rt(),
		"48": rt(),
	};

	temps["14"] = {
		"5":  rt(),
		"27": rt(),
		"35": rt(),
	};

	temps["15"] = {
		"5":  rt(),
		"27": rt(),
		"35": rt(),
	};
};

//pjs
float sideLength;
color[][] grid = new color[16][50];
int a = 16;
int b = 0;
PImage bg;
PFont mono;
int[] _rgb = { 0, 0, 0 };
int _rgbhc = 0;

int _red(float temp) {
	temp = (59.0) * (temp) - (1199.83);
	if (temp < 0) temp = 0;
	if (temp > 255) temp = 255;
	return round(temp);
}

int _green(float temp) {
	temp = (127.0) * sin((PI/4.5)*(temp-18.0)) + (128.0);
	if (temp < 0) temp = 0;
	if (temp > 255) temp = 255;
	return round(temp);
}

int _blue(float temp) {
	temp = (7.149216916) * (temp * temp) - (321.5161936) * (temp) + (3602.31507);
	if (temp < 0) temp = 0;
	if (temp > 255) temp = 255;
	return round(temp);
}

color color_from_temp(float temp, int a) {
	return color(_red(temp),_green(temp),_blue(temp),a);
}

void rgb_blend(color _new) {
	_rgb[0] += red(_new);
	_rgb[1] += green(_new);
	_rgb[2] += blue(_new);
	_rgbhc++;
}

void blendAll() {
	for (int i=0;i<16;i++) {
		for (int j=0;j<50;j++) {
			if (!temps[i+1] || !temps[i+1][j+1]) { //pass over already-set temp values
				_rgb = { 0, 0, 0 };
				_rgbhc = 0;
				if (grid[i+1]) {
					if (grid[i+1][j-1]) rgb_blend(grid[i+1][j-1]);
					if (grid[i+1][j])   rgb_blend(grid[i+1][j]);
					if (grid[i+1][j+1]) rgb_blend(grid[i+1][j+1]);
				}
		
				if (grid[i][j+1]) rgb_blend(grid[i][j+1]);
				if (grid[i][j-1]) rgb_blend(grid[i][j-1]);

				if (grid[i-1]) {
					if (grid[i-1][j+1]) rgb_blend(grid[i-1][j+1]);
					if (grid[i-1][j])   rgb_blend(grid[i-1][j]);
					if (grid[i-1][j-1]) rgb_blend(grid[i-1][j-1]);
				}

				grid[i][j] = color(_rgb[0]/_rgbhc,_rgb[1]/_rgbhc,_rgb[2]/_rgbhc,150);
			}
		}
	}
}

void drawSquares() {
	background(1);
	bg = loadImage("ComputerRoomLayout.jpg");
	image(bg,0,0,w,(w/2401*740));

	for (int i=0;i<16;i++) {
		for (int j=0;j<50;j++) {
			fill(grid[i][j]);
			rect(j*sideLength,i*sideLength - 3,sideLength,sideLength);
			if (temps[i+1] && temps[i+1][j]) {
				fill(0);
				text(temps[i+1][j],j*sideLength,i*sideLength+12);
			}
		}
	}
}

void updateBlock(int i,int j,color _new) {
	color old = grid[i][j];
	for (int k=0;k<1;k+=.1) {
		grid[i][j] = lerpColor(old,_new,k);
	}
}

void shiftColor() {
	for (int i=0;i<16;i++) { // for (int j=0;j<50;j++) grid[i][j] = color_from_temp(rt());
		if (temps[i+1]) {
			for (int j=0;j<50;j++) {
				if (temps[i+1][j+1]) grid[i][j] = color_from_temp(temps[i+1][j+1],150);
			}
		}
	} 
}

void setup() {
	size(w,w/50*(15.416));
	sideLength = (float)width / 50.0;
	//setup bground image
	bg = loadImage("ComputerRoomLayout.jpg");
	image(bg,0,0,w,(w/2401*740));

	mono = loadFont("Arial");
	textFont(mono,10);
	textAlign(RIGHT);

	gen_temps();
	noStroke();
}

void draw() {
	shiftColor();
	drawSquares();
	blendAll();

	b++;
	if (b == 20) {
		gen_temps();
		b = 1;
	}
}
